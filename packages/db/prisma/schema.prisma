// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  phoneNumber        String         @unique
  name               String
  verified           Boolean        @default(false)
  role               Role           @default(USER)
  categoryPreference EventCategory?
  bookings           Booking[]
  payments           Payment[]
  events             Event[]        @relation("AdminEvents")
}

model Event {
  id             String        @id @default(uuid())
  name           String
  startTime      DateTime
  endTime        DateTime
  venue          String
  cityId         String
  category       EventCategory
  city           City          @relation(fields: [cityId], references: [id])
  bookings       Booking[]
  payments       Payment[]
  seats          Seat[]
  isFeatured     Boolean       @default(false)
  isPremiere     Boolean       @default(false)
  views          Int           @default(0)
  description    String
  bannerImageUrl String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  adminId        String
  admin          User          @relation("AdminEvents", fields: [adminId], references: [id])
}

model Seat {
  id          String      @id @default(uuid())
  price       Int
  type        SeatType
  seatNumber  String
  lockedUntil DateTime?
  eventId     String
  event       Event       @relation(fields: [eventId], references: [id])
  bookedSeat  BookedSeat?
}

model BookedSeat {
  id        String  @id @default(uuid())
  seatId    String
  seat      Seat    @relation(fields: [seatId], references: [id])
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])

  @@unique([seatId])
}

model Booking {
  id          String        @id @default(uuid())
  eventId     String
  bookedSeats BookedSeat[]
  event       Event         @relation(fields: [eventId], references: [id])
  status      BookingStatus @default(PENDING)
  userId      String
  amount      Int
  createdAt   DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id])
  payment     Payment?
}

model Payment {
  id        String        @id @default(uuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  bookingId String
  booking   Booking       @relation(fields: [bookingId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  amount    Int
  status    PaymentStatus @default(PENDING)
  event     Event?        @relation(fields: [eventId], references: [id])
  eventId   String?

  @@unique([bookingId])
}

model City {
  id      String  @id @default(uuid())
  name    String  @unique
  state   String
  country String  @default("India")
  events  Event[]
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

enum BookingStatus {
  SUCCESS
  FAILED
  PENDING
  EXPIRED
  CANCELLED
  COMPLETED
}

enum SeatType {
  REGULAR
  PREMIUM
  RECLINER
  VIP
  COUPLE
  BALCONY
  SOFA
  LUXURY
}

enum EventCategory {
  MUSIC
  SPORTS
  COMEDY
  TECH
  EDUCATION
  WORKSHOP
  PREMIERE
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}
